- name: run local terraform
  hosts: 127.0.0.1
  connection: local
  tasks:
    - name: Run terraform
      terraform:
        project_path: "./tf"
        force_init: yes
        state: present
      register: trfrm

    - name: Add tg host
      add_host:
        name: tg_server
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.tg_server}}"
        ansible_ssh_private_key_file: ~/.ssh/id_rsa
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

    - name: Add db host
      add_host:
        name: db_server
        groups: nodes
        ansible_host: "{{ trfrm.outputs.servers.value.db_server}}"
        ansible_ssh_private_key_file: ~/.ssh/id_rsa
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"

- name: Get secrets from vault
  hosts: localhost
  tasks:
    - name: Get db secrets from vault
      community.hashi_vault.vault_kv2_get:
        path: db
      register: db

    - name: Get bot secrets from vault
      community.hashi_vault.vault_kv2_get:
        path: bot
      register: bot

- name: Write secrets to file
  hosts: localhost
  tasks:
    - name: Write db secrets
      copy:
        content: "{{ db.data | to_nice_json }}"
        dest: db.json

    - name: Write bot secrets
      copy:
        content: "{{ bot.data | to_nice_json }}"
        dest: bot.json

- name: Wait timeout for creating instances
  hosts: 127.0.0.1
  connection: local

  tasks:
    - name: Wait for port 22
      wait_for:
        host: "{{ trfrm.outputs.servers.value.db_server}}"
        port: 22

- name: Get secrets on telegram_server
  hosts: nodes
  tasks:
    - name: Get db secrets
      include_vars:
        file: db.json
        name: db

    - name: Get db secrets
      include_vars:
        file: bot.json
        name: bot

- hosts: db_server
  name: Start mysql server
  become: yes
  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install MySQL server
      apt:
        name: mysql-server-8.0
        state: present

    - name: Install python3-pip
      apt:
        name: python3-pip
        state: present

    - name: Install PyMySQL using pip
      pip:
        name: pymysql
        state: present
        executable: pip3

    - name: Change server configuration
      ansible.builtin.lineinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        regexp: "^bind-address"
        line: "bind-address = 0.0.0.0"

    - name: Start MySQL service
      service:
        name: mysql
        state: started
        enabled: yes

    - name: Add user
      mysql_user:
        name: "{{ db.data.username }}"
        password: "{{ db.data.password }}"
        priv: "restarantFinder.*:ALL"
        host: "%"  # Разрешить подключение с любого хоста
        state: present
        login_unix_socket: /run/mysqld/mysqld.sock

    - name: Copy sql import script
      copy:
        src: "{{ sql_path  }}"
        dest: /home/ubuntu

    - name: Import database dump
      mysql_db:
        name: restarauntFinder
        state: import
        login_unix_socket: /var/run/mysqld/mysqld.sock
        target: /home/ubuntu/DataBaseRestaraunt.sql


- hosts: tg_server
  name: Deploy application
  become: true

  tasks:
    - name: Update apt package cache
      apt:
        update_cache: yes

    - name: Install JDK 21
      apt:
        name: openjdk-21-jdk
        state: present

    - name: Copy jar archive
      copy:
        src: "{{ jar_path }}"
        dest: /home/ubuntu/
        
    - name: Export db url
      ansible.builtin.shell: export SPRING_DATASOURCE_URL = "jdbc:mysql://{{ hostvars['db_server']['ansible_host'] }}:3306/restarauntFinder"

    - name: Export db uname
      ansible.builtin.shell: export SPRING_DATASOURCE_USERNAME = "{{ db.data.username }}"

    - name: Export db passwd
      ansible.builtin.shell: export SPRING_DATASOURCE_PASSWORD = "{{ db.data.password }}"

    - name: Export bot token
      ansible.builtin.shell: export BOT_TOKEN =  "{{ bot.data.token}}"

    - name: Deploy Java application
      ansible.builtin.shell: nohup java -jar /home/ubuntu/"{{ jar_path | basename }}" &

- name: Delete files with secrets
  hosts: localhost
  tasks:
    - name: delete db files
      ansible.builtin.file:
        path: db.json
        state: absent

    - name: delete bot files
      ansible.builtin.file:
        path: bot.json
        state: absent
